services:
  production-reportable-service-db:
    image: postgres:17-bookworm
    container_name: production-reportable-service-db
    environment:
      POSTGRES_USER: '${REPORTABLE_DB_USER}'
      POSTGRES_PASSWORD: '${REPORTABLE_DB_PASSWORD}'
      POSTGRES_DB: '${REPORTABLE_DB_NAME}'
    ports:
      - '${REPORTABLE_DB_PORT}:5432'
    expose:
      - 5432
    volumes:
      - production-reportable-service-data:/var/lib/postgresql/data
    networks:
      - production-main-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${REPORTABLE_DB_USER} -d ${REPORTABLE_DB_NAME}"]
      interval: 10s
      timeout: 2s
      retries: 10


  production-redis:
    image: redis:latest
    container_name: production-redis
    ports:
      - "${REDIS_PORT}:6379"
    expose:
      - 6379
    volumes:
      - production-redis-data:/data
    networks:
      - production-main-network
    environment:
      REDIS_PASSWORD: '${REDIS_PASSWORD}'
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}", "--appendonly", "yes"]

  production-minio:
    image: minio/minio:latest
    container_name: production-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - production-minio-data:/data
    networks:
      - production-main-network
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server --console-address ":9001" /data

  reportable-app:
    build:
      context: .
      dockerfile: ./docker/reportable/Dockerfile

    container_name: reportable-app
    restart: unless-stopped
    expose:
      - 8080
    ports:
      - "8080:8080"
    entrypoint: /docker/entrypoint.sh
    depends_on:
      - production-reportable-service-db
    volumes: 
      - ./backend/reportable-app/.:/app/
    networks:
      - production-main-network

  frontend:
    build:
      context: .
      dockerfile: ./docker/frontend/Dockerfile

    container_name: reportable-nginx-frontend
    restart: unless-stopped
    expose:
      - 80
      - 443
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - reportable-app
    networks:
      - production-main-network
      
networks:
  production-main-network:
    driver: bridge

volumes:
  production-reportable-service-data:
  production-user-service-data:
  production-minio-data:
  production-redis-data:
